// Sistema de filtragem de modelos baseado no tipo de conexão anterior
import { detectPreviousNodeType, type NodeConnectionType } from './node-connection-detector';
import { type Node, type Edge } from '@xyflow/react';

// Tipos de modelos disponíveis
export interface FilteredModel {
  id: string;
  label: string;
  chef: any;
  providers: any[];
  aspectRatios?: Array<{ label: string; value: string }>;
  icon?: any;
  default?: boolean;
  maxImages?: number;
}

// Modelos de imagem disponíveis (apenas FAL)
const IMAGE_MODELS = {
  'fal-ai/flux-pro-kontext': {
    id: 'fal-ai/flux-pro-kontext',
    label: 'FLUX.1 Kontext [pro]',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem
  },
  'fal-ai/flux-pro/kontext/max': {
    id: 'fal-ai/flux-pro/kontext/max',
    label: 'FLUX.1 Kontext [max]',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem
  },
  'fal-ai/flux-pro-v1.1': {
    id: 'fal-ai/flux-pro-v1.1',
    label: 'FLUX1.1 [pro]',
    provider: 'fal',
    supportedInputs: ['text-primitive', 'text-transform'] // Apenas texto
  },
  'fal-ai/flux-pro-v1.1-ultra': {
    id: 'fal-ai/flux-pro-v1.1-ultra',
    label: 'FLUX1.1 [pro] ultra',
    provider: 'fal',
    supportedInputs: ['text-primitive', 'text-transform'] // Apenas texto
  },
  'fal-ai/nano-banana': {
    id: 'fal-ai/nano-banana',
    label: 'Nano Banana',
    provider: 'fal',
    supportedInputs: ['text-primitive', 'text-transform'] // Apenas texto
  },

  'fal-ai/imagen4': {
    id: 'fal-ai/imagen4',
    label: 'Imagen 4',
    provider: 'fal',
    supportedInputs: ['text-primitive', 'text-transform'] // Apenas texto
  },
  'fal-ai/imagen4-ultra': {
    id: 'fal-ai/imagen4-ultra',
    label: 'Imagen 4 Ultra',
    provider: 'fal',
    supportedInputs: ['text-primitive', 'text-transform'] // Apenas texto
  },
  'fal-ai/ideogram-v3': {
    id: 'fal-ai/ideogram-v3',
    label: 'Ideogram 3.0',
    provider: 'fal',
    supportedInputs: ['text-primitive', 'text-transform'] // Apenas texto
  },
  'fal-ai/recraft-v3': {
    id: 'fal-ai/recraft-v3',
    label: 'Recraft V3',
    provider: 'fal',
    supportedInputs: ['text-primitive', 'text-transform'] // Apenas texto
  },
  'fal-ai/flux-krea': {
    id: 'fal-ai/flux-krea',
    label: 'FLUX.1 Krea',
    provider: 'fal',
    supportedInputs: ['text-primitive', 'text-transform'] // Apenas texto
  },
  'fal-ai/luma-photon': {
    id: 'fal-ai/luma-photon',
    label: 'Luma Photon',
    provider: 'fal',
    supportedInputs: ['text-primitive', 'text-transform'] // Apenas texto
  },
  'fal-ai/nano-banana/edit': {
    id: 'fal-ai/nano-banana/edit',
    label: 'Nano Banana Edit',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: Infinity // Aceita múltiplas imagens
  },
  'fal-ai/ideogram/character': {
    id: 'fal-ai/ideogram/character',
    label: 'Ideogram 3.0 Character',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem de referência
  },
  'fal-ai/recraft/v3/image-to-image': {
    id: 'fal-ai/recraft/v3/image-to-image',
    label: 'Recraft V3',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem
  },
  'fal-ai/ideogram/v3/reframe': {
    id: 'fal-ai/ideogram/v3/reframe',
    label: 'Ideogram 3.0 Reframe',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem
  },
  'fal-ai/ideogram/v3/remix': {
    id: 'fal-ai/ideogram/v3/remix',
    label: 'Ideogram 3.0 Remix',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem
  },
  'fal-ai/topaz/upscale/image': {
    id: 'fal-ai/topaz/upscale/image',
    label: 'Topaz Upscale',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem
  },
  'fal-ai/recraft/upscale/creative': {
    id: 'fal-ai/recraft/upscale/creative',
    label: 'Recraft Creative Upscale',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem
  },
  'fal-ai/recraft/upscale/crisp': {
    id: 'fal-ai/recraft/upscale/crisp',
    label: 'Recraft Crisp Upscale',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem
  },
  'fal-ai/ideogram/upscale': {
    id: 'fal-ai/ideogram/upscale',
    label: 'Ideogram 3.0 Upscale',
    provider: 'fal',
    supportedInputs: ['image-primitive', 'image-transform'], // Apenas imagem
    maxImages: 1 // Aceita apenas uma imagem
  }
};

// Modelos de vídeo disponíveis
const VIDEO_MODELS = {
  // Modelos Replicate
  'wan-video/wan-2.2-i2v-a14b': {
    id: 'wan-video/wan-2.2-i2v-a14b',
    label: 'WAN Video (Replicate)',
    provider: 'replicate',
    supportedInputs: [
      'text-primitive',
      'text-transform',
      'image-primitive',
      'image-transform',
      'video-primitive',
      'video-transform'
    ]
  },
  'fal-ai/luma-ray-2': {
    id: 'fal-ai/luma-ray-2',
    label: 'Luma Ray 2',
    provider: 'fal',
    supportedInputs: [
      'text-primitive',
      'text-transform'
    ]
  },
  'fal-ai/kling-2.1-master': {
    id: 'fal-ai/kling-2.1-master',
    label: 'Kling 2.1 Master',
    provider: 'fal',
    supportedInputs: [
      'text-primitive',
      'text-transform'
    ]
  },
  'fal-ai/minimax/hailuo-02/pro/text-to-video': {
    id: 'fal-ai/minimax/hailuo-02/pro/text-to-video',
    label: 'Hailuo 02 Pro',
    provider: 'fal',
    supportedInputs: [
      'text-primitive',
      'text-transform'
    ]
  },
  'moonvalley/marey/t2v': {
    id: 'moonvalley/marey/t2v',
    label: 'Marey T2V',
    provider: 'fal',
    supportedInputs: [
      'text-primitive',
      'text-transform'
    ]
  },
  'fal-ai/pika/v2.2/text-to-video': {
    id: 'fal-ai/pika/v2.2/text-to-video',
    label: 'Pika v2.2',
    provider: 'fal',
    supportedInputs: [
      'text-primitive',
      'text-transform'
    ]
  },
  'fal-ai/veo3': {
    id: 'fal-ai/veo3',
    label: 'Veo 3',
    provider: 'fal',
    supportedInputs: [
      'text-primitive',
      'text-transform'
    ]
  },
  'fal-ai/wan/v2.2-a14b/text-to-video': {
    id: 'fal-ai/wan/v2.2-a14b/text-to-video',
    label: 'WAN 2.2 A14B',
    provider: 'fal',
    supportedInputs: [
      'text-primitive',
      'text-transform'
    ]
  }
  
  // Futuros modelos text-to-video serão adicionados aqui
  // 'future-text-to-video-model': {
  //   id: 'future-text-to-video-model',
  //   label: 'Text to Video Model',
  //   supportedInputs: ['none', 'text-primitive', 'text-transform']
  // }
};

/**
 * Filtra modelos de imagem baseado no tipo de conexão anterior
 * @param connectionType - Tipo de conexão detectada
 * @param availableModels - Modelos disponíveis no componente
 * @returns Modelos filtrados
 */
export const filterImageModels = (
  connectionType: NodeConnectionType,
  availableModels: Record<string, any>
): Record<string, any> => {
  const filteredModels: Record<string, any> = {};
  // Quando não há conexões anteriores, tratar como 'text-primitive'
  // para exibir modelos text-to-image por padrão.
  const effectiveType = connectionType === 'none' ? 'text-primitive' : connectionType;
  
  Object.entries(availableModels).forEach(([modelId, modelConfig]) => {
    const modelInfo = IMAGE_MODELS[modelId as keyof typeof IMAGE_MODELS];
    
    if (modelInfo && modelInfo.supportedInputs.includes(effectiveType)) {
      filteredModels[modelId] = {
