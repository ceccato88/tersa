'use server';

import { getSubscribedUser } from '@/lib/auth';
import { database } from '@/lib/database';
import { parseError } from '@/lib/error/parse';
import { visionModels } from '@/lib/models/vision';
import { projects } from '@/schema';
import { eq } from 'drizzle-orm';
import Replicate from 'replicate';

export const describeAction = async (
  url: string,
  projectId: string
): Promise<
  | {
      description: string;
    }
  | {
      error: string;
    }
> => {
  try {
    await getSubscribedUser();

    const replicate = new Replicate({
      auth: process.env.REPLICATE_API_TOKEN,
    });

    const project = await database.query.projects.findFirst({
      where: eq(projects.id, projectId),
    });

    if (!project) {
      throw new Error('Project not found');
    }

    const visionModel = visionModels[project.visionModel];

    if (!visionModel) {
      throw new Error('Vision model not found');
    }

    let parsedUrl = url;

    if (process.env.NODE_ENV !== 'production') {
      const response = await fetch(url);
      const blob = await response.blob();

      parsedUrl = `data:${blob.type};base64,${Buffer.from(await blob.arrayBuffer()).toString('base64')}`;
    }

    // Usando o modelo de vis√£o selecionado no projeto
    const output = await replicate.run(visionModel.replicateModel, {
      input: {
        prompt: 'Descreva esta imagem em detalhes.',
        image: parsedUrl,
        max_tokens: 500,
      },
    });

    const description = Array.isArray(output) ? output.join('') : output;

    if (!description || typeof description !== 'string') {
      throw new Error('No description found');
    }

    return {
      description,
    };
  } catch (error) {
    const message = parseError(error);

    return { error: message };
  }
};