# Configura√ß√£o Completa: Supabase com HTTPS e Dom√≠nio Personalizado

## üìã √çndice

1. [Pr√©-requisitos: Instala√ß√£o Docker](#pr√©-requisitos-instala√ß√£o-docker)
2. [Informa√ß√µes Gerais](#informa√ß√µes-gerais)
3. [Configura√ß√£o DNS](#configura√ß√£o-dns)
4. [Configura√ß√£o do Servidor](#configura√ß√£o-do-servidor)
5. [Configura√ß√£o Nginx](#configura√ß√£o-nginx)
6. [Configura√ß√£o SSL com Let's Encrypt](#configura√ß√£o-ssl-com-lets-encrypt)
7. [Configura√ß√£o do Supabase](#configura√ß√£o-do-supabase)
8. [Configura√ß√£o da Aplica√ß√£o Next.js](#configura√ß√£o-da-aplica√ß√£o-nextjs)
9. [Testes e Verifica√ß√µes](#testes-e-verifica√ß√µes)
10. [Solu√ß√£o de Problemas](#solu√ß√£o-de-problemas)
11. [Manuten√ß√£o](#manuten√ß√£o)

---

## üê≥ Pr√©-requisitos: Instala√ß√£o Docker

**‚ö†Ô∏è IMPORTANTE:** Antes de configurar o Supabase, voc√™ DEVE instalar o Docker e Docker Compose no servidor.

### Passo 1: Conectar ao Servidor

```bash
# Conectar via SSH
ssh root@[IP_DO_SEU_SERVIDOR]
```

### Passo 2: Atualizar Sistema

```bash
# Atualizar pacotes do sistema
apt update && apt upgrade -y

# Instalar depend√™ncias b√°sicas
apt install -y curl wget git nano ufw
```

### Passo 3: Instalar Docker

```bash
# Remover vers√µes antigas do Docker (se existirem)
apt remove -y docker docker-engine docker.io containerd runc

# Instalar depend√™ncias para HTTPS
apt install -y apt-transport-https ca-certificates curl gnupg lsb-release

# Adicionar chave GPG oficial do Docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Adicionar reposit√≥rio do Docker
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# Atualizar √≠ndice de pacotes
apt update

# Instalar Docker Engine
apt install -y docker-ce docker-ce-cli containerd.io
```

### Passo 4: Instalar Docker Compose

```bash
# Baixar Docker Compose (vers√£o mais recente)
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# Dar permiss√£o de execu√ß√£o
chmod +x /usr/local/bin/docker-compose

# Criar link simb√≥lico (opcional, para compatibilidade)
ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
```

### Passo 5: Verificar Instala√ß√£o

```bash
# Verificar vers√£o do Docker
docker --version

# Verificar vers√£o do Docker Compose
docker-compose --version

# Testar Docker
docker run hello-world

# Verificar status do servi√ßo Docker
systemctl status docker
```

### Passo 6: Configurar Docker para Iniciar Automaticamente

```bash
# Habilitar Docker para iniciar com o sistema
systemctl enable docker
systemctl enable containerd

# Verificar se est√° habilitado
systemctl is-enabled docker
```

### Passo 7: Configurar Usu√°rio Docker (Opcional)

```bash
# Criar grupo docker (se n√£o existir)
groupadd docker

# Adicionar usu√°rio atual ao grupo docker
usermod -aG docker $USER

# Aplicar mudan√ßas de grupo (ou fazer logout/login)
newgrp docker
```

### ‚úÖ Verifica√ß√£o Final

**Comandos para verificar se tudo est√° funcionando:**

```bash
# Verificar vers√µes instaladas
echo "=== VERS√ïES INSTALADAS ==="
docker --version
docker-compose --version

# Verificar servi√ßos
echo "=== STATUS DOS SERVI√áOS ==="
systemctl is-active docker
systemctl is-enabled docker

# Testar funcionamento
echo "=== TESTE DE FUNCIONAMENTO ==="
docker run --rm hello-world

# Verificar containers em execu√ß√£o
echo "=== CONTAINERS ATIVOS ==="
docker ps
```

**‚úÖ Sinais de sucesso:**
- Docker version 20.x.x ou superior
- Docker Compose version 2.x.x ou superior
- Servi√ßo docker ativo e habilitado
- Teste hello-world executado com sucesso

**üö® Se houver problemas:**
```bash
# Reiniciar servi√ßo Docker
systemctl restart docker

# Verificar logs de erro
journalctl -u docker.service

# Verificar status detalhado
systemctl status docker -l
```

---

## üîß Informa√ß√µes Gerais

### Dados do Servidor
```
IP do Servidor: [IP_DO_SEU_SERVIDOR]
Usu√°rio SSH: root
Porta Supabase: 8000
Dom√≠nio: [SEU_DOMINIO]
Porta HTTP: 80
Porta HTTPS: 443
```

### Credenciais Supabase
```
Painel: https://[SEU_DOMINIO]
Usu√°rio: supabase
Senha: 8Rt10fNWfsbYR0bo

PostgreSQL:
Usu√°rio: postgres
Senha: Fu9qWO9KRBTHJJolCqXY
Porta: 5432

JWT Secret: 8UfvlMR0206Ee2Iwq7EFLdS2PcpN0dRi
```

---

## üåê Configura√ß√£o DNS

### Passo 1: Acessar Painel DNS

1. Acesse o painel do seu provedor de DNS (onde voc√™ registrou o dom√≠nio)
2. Localize a se√ß√£o de "DNS Management" ou "Zona DNS"

### Passo 2: Configurar Registro A

```
Tipo: A
Nome: @ (ou deixe em branco para dom√≠nio raiz)
Valor: [IP_DO_SEU_SERVIDOR]
TTL: 300 (ou m√≠nimo dispon√≠vel)
```

### Passo 3: Configurar Subdom√≠nios (Opcional)

Se quiser usar subdom√≠nios como `api.[SEU_DOMINIO]`:

```
Tipo: A
Nome: api
Valor: [IP_DO_SEU_SERVIDOR]
TTL: 300
```

### Passo 4: Verificar Propaga√ß√£o DNS

```bash
# Verificar se DNS est√° funcionando
nslookup [SEU_DOMINIO]

# Alternativa mais detalhada
dig [SEU_DOMINIO]

# Verificar de diferentes locais
# Use: https://dnschecker.org/#A/[SEU_DOMINIO]
```

**‚è∞ Tempo de propaga√ß√£o:** Entre 5 minutos a 48 horas (geralmente 15-30 minutos)

---

## üñ•Ô∏è Configura√ß√£o do Servidor

### Passo 1: Conectar ao Servidor

```bash
ssh root@[IP_DO_SEU_SERVIDOR]
```

### Passo 2: Atualizar Sistema

```bash
# Atualizar reposit√≥rios
apt update && apt upgrade -y

# Instalar depend√™ncias b√°sicas
apt install curl wget git nano htop -y
```

### Passo 3: Instalar Nginx e Certbot

```bash
# Instalar nginx
apt install nginx -y

# Instalar certbot para SSL
apt install certbot python3-certbot-nginx -y

# Verificar se nginx est√° rodando
systemctl status nginx
systemctl enable nginx
```

---

## üîß Configura√ß√£o Nginx

### Passo 1: Remover Configura√ß√£o Padr√£o

```bash
# Remover site padr√£o
rm -f /etc/nginx/sites-enabled/default
rm -f /etc/nginx/sites-available/default
```

### Passo 2: Configurar nginx.conf Global

**IMPORTANTE:** Primeiro, configure o arquivo principal do Nginx para resolver erro 413:

```bash
# Editar configura√ß√£o global do nginx
nano /etc/nginx/nginx.conf
```

**Adicionar no bloco `http {}`:**

```nginx
http {
    # ... outras configura√ß√µes existentes ...
    
    # Configura√ß√£o global para uploads grandes (resolve erro 413)
    client_max_body_size 100M;
    client_body_buffer_size 16k;
    client_body_timeout 60s;
    
    # ... resto das configura√ß√µes ...
}
```

### Passo 3: Criar Configura√ß√£o do Supabase

```bash
# Criar arquivo de configura√ß√£o
nano /etc/nginx/sites-available/supabase
```

**Conte√∫do do arquivo:**

```nginx
server {
    listen 80;
    server_name [SEU_DOMINIO];
    
    # Configura√ß√£o global para uploads grandes
    client_max_body_size 100M;
    
    # Configura√ß√µes de proxy
    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Headers CORS (incluindo para respostas de erro)
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Cache-Control, X-Requested-With' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range' always;
        
        # Configura√ß√µes para WebSocket (Supabase Realtime)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Configura√ß√µes para uploads grandes
        proxy_request_buffering off;
        proxy_max_temp_file_size 0;
    }
    
    # Configura√ß√£o espec√≠fica para storage (uploads grandes)
    location /storage/ {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Headers CORS espec√≠ficos para storage
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Cache-Control, X-Requested-With' always;
        
        # Permitir uploads grandes
        client_max_body_size 100M;
        proxy_request_buffering off;
        proxy_max_temp_file_size 0;
        
        # Timeouts espec√≠ficos para uploads
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # Tratar requisi√ß√µes OPTIONS (preflight CORS)
    location ~* \.(OPTIONS)$ {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Cache-Control, X-Requested-With' always;
        add_header 'Access-Control-Max-Age' 1728000 always;
        add_header 'Content-Type' 'text/plain charset=UTF-8' always;
        add_header 'Content-Length' 0 always;
        return 204;
    }
}
```

### Passo 4: Ativar Configura√ß√£o

```bash
# Criar link simb√≥lico
ln -s /etc/nginx/sites-available/supabase /etc/nginx/sites-enabled/

# Testar configura√ß√£o
nginx -t

# Se n√£o houver erros, reiniciar nginx
systemctl restart nginx

# Verificar status
systemctl status nginx
```

### Passo 5: Configurar Firewall

```bash
# Permitir HTTP e HTTPS
ufw allow 'Nginx Full'

# Verificar regras
ufw status
```

---

## üîí Configura√ß√£o SSL com Let's Encrypt

### Passo 1: Verificar DNS

Antes de prosseguir, certifique-se que o DNS est√° propagado:

```bash
curl -I http://[SEU_DOMINIO]
```

### Passo 2: Obter Certificado SSL

```bash
# Executar certbot
certbot --nginx -d [SEU_DOMINIO]
```

**Durante o processo voc√™ ser√° perguntado:**

1. **Email:** Digite um email v√°lido para notifica√ß√µes
2. **Termos de Uso:** Digite `Y` para aceitar
3. **Newsletter:** Digite `N` ou `Y` conforme preferir
4. **Redirecionamento HTTP ‚Üí HTTPS:** Digite `2` para redirecionar automaticamente

### Passo 3: Verificar Configura√ß√£o Final

Ap√≥s a configura√ß√£o, o nginx ter√° uma configura√ß√£o similar a esta:

```nginx
server {
    server_name [SEU_DOMINIO];
    
    # Configura√ß√£o global para uploads grandes
    client_max_body_size 100M;
    
    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Headers CORS (incluindo para respostas de erro)
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Cache-Control, X-Requested-With' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range' always;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Configura√ß√µes para uploads grandes
        proxy_request_buffering off;
        proxy_max_temp_file_size 0;
    }
    
    location /storage/ {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Headers CORS espec√≠ficos para storage
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Cache-Control, X-Requested-With' always;
        
        client_max_body_size 100M;
        proxy_request_buffering off;
        proxy_max_temp_file_size 0;
        
        # Timeouts espec√≠ficos para uploads
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # Tratar requisi√ß√µes OPTIONS (preflight CORS)
    location ~* \.(OPTIONS)$ {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Cache-Control, X-Requested-With' always;
        add_header 'Access-Control-Max-Age' 1728000 always;
        add_header 'Content-Type' 'text/plain charset=UTF-8' always;
        add_header 'Content-Length' 0 always;
        return 204;
    }

    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/[SEU_DOMINIO]/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/[SEU_DOMINIO]/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

server {
    if ($host = [SEU_DOMINIO]) {
        return 301 https://$host$request_uri;
    }
    
    listen 80;
    server_name [SEU_DOMINIO];
    return 404;
}
```

### Passo 4: Configurar Renova√ß√£o Autom√°tica

```bash
# Testar renova√ß√£o
certbot renew --dry-run

# Verificar timer de renova√ß√£o autom√°tica
systemctl status certbot.timer

# Se n√£o estiver ativo, ativar
systemctl enable certbot.timer
systemctl start certbot.timer
```

---

## üóÑÔ∏è Configura√ß√£o do Supabase

### Passo 1: Localizar Arquivo de Configura√ß√£o

```bash
# Encontrar docker-compose do Supabase
find / -name "docker-compose.yml" -path "*/supabase/*" 2>/dev/null

# Ou procurar por arquivos .env
find / -name ".env" -path "*/supabase/*" 2>/dev/null
```

### Passo 2: Editar Configura√ß√µes do Supabase

**Arquivo: `docker-compose.yml` ou `.env`**

**ANTES:**
```env
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

SITE_URL=http://localhost:3000
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=http://localhost:8000

PGRST_DB_SCHEMAS=public,storage,graphql_public
```

**DEPOIS:**
```env
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

SITE_URL=https://[SEU_DOMINIO]
ADDITIONAL_REDIRECT_URLS=https://[SEU_DOMINIO]/auth/callback
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=https://[SEU_DOMINIO]

PGRST_DB_SCHEMAS=public,storage,graphql_public
```

### Passo 3: Configura√ß√µes Adicionais do Storage

Se houver arquivo espec√≠fico para storage:

```env
# Configura√ß√µes do Storage
STORAGE_BACKEND=file
FILE_SIZE_LIMIT=52428800
FILE_STORAGE_BACKEND_PATH=/var/lib/storage
STORAGE_PUBLIC_URL=https://[SEU_DOMINIO]/storage/v1/object/public
```

### Passo 4: Reiniciar Supabase

```bash
# Parar servi√ßos
docker-compose down

# Iniciar novamente
docker-compose up -d

# Verificar logs
docker-compose logs -f

# Verificar containers rodando
docker ps
```

---

## ‚öõÔ∏è Configura√ß√£o da Aplica√ß√£o Next.js

### Passo 1: Atualizar Vari√°veis de Ambiente

**Arquivo: `.env.local` (na aplica√ß√£o Next.js)**

**CONFIGURA√á√ÉO CENTRALIZADA (RECOMENDADA):**
```env
# Configura√ß√µes principais do Supabase
NEXT_PUBLIC_SUPABASE_URL=https://[SEU_DOMINIO]
NEXT_PUBLIC_SUPABASE_ANON_KEY=sua_anon_key_aqui

# üÜï NOVAS VARI√ÅVEIS PARA ESTRAT√âGIA H√çBRIDA
# URL para uploads (pode ser IP direto para melhor performance)
NEXT_PUBLIC_SUPABASE_UPLOAD_URL=http://[IP_DO_SEU_SERVIDOR]:8000

# Dom√≠nio e hostname para configura√ß√µes din√¢micas
NEXT_PUBLIC_SUPABASE_DOMAIN=[SEU_DOMINIO]
NEXT_PUBLIC_SUPABASE_HOSTNAME=[IP_DO_SEU_SERVIDOR]
```

**CONFIGURA√á√ÉO ANTERIOR (AINDA FUNCIONA):**
```env
NEXT_PUBLIC_SUPABASE_URL=https://[SEU_DOMINIO]
NEXT_PUBLIC_SUPABASE_ANON_KEY=sua_anon_key_aqui
```

### Passo 2: Validar Vari√°veis de Ambiente

**üÜï Arquivo: `lib/env.ts` (ATUALIZA√á√ÉO OBRIGAT√ìRIA)**

Para usar as novas vari√°veis de ambiente, voc√™ DEVE adicionar as valida√ß√µes no arquivo `env.ts`:

```typescript
// Adicionar na se√ß√£o client:
client: {
  // ... outras vari√°veis existentes
  
  // üÜï NOVAS VARI√ÅVEIS PARA ESTRAT√âGIA H√çBRIDA
  NEXT_PUBLIC_SUPABASE_UPLOAD_URL: z.string().url(),
  NEXT_PUBLIC_SUPABASE_DOMAIN: z.string().min(1),
  NEXT_PUBLIC_SUPABASE_HOSTNAME: z.string().min(1),
},

// Adicionar na se√ß√£o runtimeEnv:
runtimeEnv: {
  // ... outras vari√°veis existentes
  
  // üÜï NOVAS VARI√ÅVEIS PARA ESTRAT√âGIA H√çBRIDA
  NEXT_PUBLIC_SUPABASE_UPLOAD_URL: process.env.NEXT_PUBLIC_SUPABASE_UPLOAD_URL,
  NEXT_PUBLIC_SUPABASE_DOMAIN: process.env.NEXT_PUBLIC_SUPABASE_DOMAIN,
  NEXT_PUBLIC_SUPABASE_HOSTNAME: process.env.NEXT_PUBLIC_SUPABASE_HOSTNAME,
},
```

**‚ö†Ô∏è IMPORTANTE:** Sem essa valida√ß√£o, as vari√°veis n√£o ser√£o carregadas e voc√™ receber√° erro "Failed to fetch".

### Passo 3: Verificar Configura√ß√£o do Cliente Supabase

**Arquivo: `lib/supabase/client.ts`**

```typescript
import { createBrowserClient } from '@supabase/ssr';
import { env } from '../env';

export const createClient = () =>
  createBrowserClient(
    env.NEXT_PUBLIC_SUPABASE_URL, // https://[SEU_DOMINIO]
    env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );
```

**üÜï Arquivo: `lib/supabase/upload-client.ts` (NOVO)**

```typescript
import { createBrowserClient } from '@supabase/ssr';
import { env } from '../env';

// Cliente espec√≠fico para uploads (pode usar IP direto)
export const createUploadClient = () =>
  createBrowserClient(
    env.NEXT_PUBLIC_SUPABASE_UPLOAD_URL, // http://[IP_DO_SEU_SERVIDOR]:8000
    env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );
```

**Arquivo: `lib/supabase/server.ts`**

```typescript
import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { env } from '../env';

export const createClient = async () => {
  const cookieStore = await cookies();

  return createServerClient(
    env.NEXT_PUBLIC_SUPABASE_URL, // https://[SEU_DOMINIO]
    env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            for (const { name, value, options } of cookiesToSet) {
              cookieStore.set(name, value, options);
            }
          } catch {
            // Error handling
          }
        },
      },
    }
  );
};
```

### Passo 3: Configurar Next.js para Aceitar Novo Dom√≠nio

**Arquivo: `next.config.ts`**

O Next.js precisa ser configurado para aceitar imagens do novo dom√≠nio. **CONFIGURA√á√ÉO CENTRALIZADA (RECOMENDADA):**

```typescript
import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  images: {
    formats: ['image/avif', 'image/webp'],
    remotePatterns: [
      // Outros hostnames existentes...
      
      // üÜï CONFIGURA√á√ÉO CENTRALIZADA: Supabase storage com vari√°veis de ambiente
      {
        protocol: 'http',
        hostname: process.env.NEXT_PUBLIC_SUPABASE_HOSTNAME || '[IP_DO_SEU_SERVIDOR]',
      },
      {
        protocol: 'https',
        hostname: process.env.NEXT_PUBLIC_SUPABASE_DOMAIN || '[SEU_DOMINIO]',
      },
      
      // Outros hostnames...
    ],
  },
  // ... resto da configura√ß√£o
};

export default nextConfig;
```

**CONFIGURA√á√ÉO ANTERIOR (AINDA FUNCIONA):**

```typescript
import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  images: {
    formats: ['image/avif', 'image/webp'],
    remotePatterns: [
      // Supabase storage, custom IP
      {
        protocol: 'http',
        hostname: '[IP_DO_SEU_SERVIDOR]',
      },
      
      // Supabase storage, custom domain
      {
        protocol: 'https',
        hostname: '[SEU_DOMINIO]',
      },
    ],
  },
};

export default nextConfig;
```

### Passo 4: Benef√≠cios da Estrat√©gia H√≠brida

**üéØ VANTAGENS DA CONFIGURA√á√ÉO CENTRALIZADA:**

1. **Flexibilidade:** Pode alternar entre IP direto e dom√≠nio sem alterar c√≥digo
2. **Performance:** Upload via IP direto (mais r√°pido) + URLs p√∫blicas via HTTPS
3. **Manuten√ß√£o:** Configura√ß√µes centralizadas em vari√°veis de ambiente
4. **Compatibilidade:** Funciona tanto em desenvolvimento quanto produ√ß√£o
5. **Seguran√ßa:** URLs p√∫blicas sempre via HTTPS

**üìã CASOS DE USO:**
- **Upload de arquivos:** Usa `NEXT_PUBLIC_SUPABASE_UPLOAD_URL` (IP direto)
- **Exibi√ß√£o de imagens:** Usa `NEXT_PUBLIC_SUPABASE_URL` (HTTPS)
- **Configura√ß√£o de imagens:** Usa vari√°veis din√¢micas no `next.config.ts`

### Passo 5: Reiniciar Aplica√ß√£o

```bash
# Parar aplica√ß√£o Next.js
# Ctrl+C no terminal onde est√° rodando

# Instalar depend√™ncias (se necess√°rio)
npm install

# Iniciar novamente (OBRIGAT√ìRIO ap√≥s mudan√ßa no next.config.ts)
npm run dev
```

**‚ö†Ô∏è IMPORTANTE:** O servidor Next.js DEVE ser reiniciado ap√≥s qualquer mudan√ßa no `next.config.ts` ou `env.ts`.

---

## üß™ Testes e Verifica√ß√µes

### Passo 1: Testar Acesso HTTPS

```bash
# Testar se o site est√° acess√≠vel
curl -I https://[SEU_DOMINIO]

# Resposta esperada:
# HTTP/2 200
# content-type: text/html; charset=utf-8
```

### Passo 2: Testar API do Supabase

```bash
# Testar endpoint da API
curl -I https://[SEU_DOMINIO]/rest/v1/

# Testar storage
curl -I https://[SEU_DOMINIO]/storage/v1/object/list/
```

### Passo 3: Testar URL de Imagem

```bash
# Testar uma URL de imagem espec√≠fica
curl -I https://[SEU_DOMINIO]/storage/v1/object/public/files/24fd2361-7220-40b8-86fd-fe4a3da3ceb0/exemplo.jpeg
```

### Passo 4: Verificar SSL

```bash
# Verificar certificado SSL
openssl s_client -connect [SEU_DOMINIO]:443 -servername [SEU_DOMINIO]

# Ou usar online: https://www.ssllabs.com/ssltest/
```

### Passo 5: Testar na Aplica√ß√£o

1. **Acesse a aplica√ß√£o:** Verifique se carrega normalmente
2. **Teste upload de imagem:** Verifique se as URLs geradas usam HTTPS
3. **Teste conectividade:** Verifique se n√£o h√° erros de CORS ou certificado
4. **üÜï Teste vari√°veis de ambiente:** Verifique se as novas vari√°veis est√£o carregando

### üÜï Verificar Vari√°veis de Ambiente

**No console do navegador (F12):**
```javascript
// Verificar se as vari√°veis est√£o carregadas
console.log('Upload URL:', process.env.NEXT_PUBLIC_SUPABASE_UPLOAD_URL);
console.log('Domain:', process.env.NEXT_PUBLIC_SUPABASE_DOMAIN);
console.log('Hostname:', process.env.NEXT_PUBLIC_SUPABASE_HOSTNAME);
```

**Resultado esperado:**
```
Upload URL: http://[IP_DO_SEU_SERVIDOR]:8000
Domain: [SEU_DOMINIO]
Hostname: [IP_DO_SEU_SERVIDOR]
```

### Exemplo de URLs Corretas

**ESTRAT√âGIA H√çBRIDA (RECOMENDADA):**

*Upload (via IP direto):*
```
http://[IP_DO_SEU_SERVIDOR]:8000/storage/v1/object/files/bucket/arquivo.jpeg
```

*URL p√∫blica (via HTTPS):*
```
https://[SEU_DOMINIO]/storage/v1/object/public/files/24fd2361-7220-40b8-86fd-fe4a3da3ceb0/exemplo.jpeg
```

**CONFIGURA√á√ÉO ANTERIOR:**

*ANTES:*
```
http://[IP_DO_SEU_SERVIDOR]:8000/storage/v1/object/public/files/24fd2361-7220-40b8-86fd-fe4a3da3ceb0/exemplo.jpeg
```

*DEPOIS:*
```
https://[SEU_DOMINIO]/storage/v1/object/public/files/24fd2361-7220-40b8-86fd-fe4a3da3ceb0/exemplo.jpeg
```

---

## üö® Solu√ß√£o de Problemas

### üÜï Erro "Failed to fetch" ap√≥s Configura√ß√£o

**Sintoma:** Erro ao fazer upload de imagens ap√≥s implementar configura√ß√£o centralizada.

**Causa:** Vari√°veis de ambiente n√£o validadas no `lib/env.ts`.

**Solu√ß√£o:**
```typescript
// Verificar se as vari√°veis est√£o no lib/env.ts
// Se√ß√£o client:
NEXT_PUBLIC_SUPABASE_UPLOAD_URL: z.string().url(),
NEXT_PUBLIC_SUPABASE_DOMAIN: z.string().min(1),
NEXT_PUBLIC_SUPABASE_HOSTNAME: z.string().min(1),

// Se√ß√£o runtimeEnv:
NEXT_PUBLIC_SUPABASE_UPLOAD_URL: process.env.NEXT_PUBLIC_SUPABASE_UPLOAD_URL,
NEXT_PUBLIC_SUPABASE_DOMAIN: process.env.NEXT_PUBLIC_SUPABASE_DOMAIN,
NEXT_PUBLIC_SUPABASE_HOSTNAME: process.env.NEXT_PUBLIC_SUPABASE_HOSTNAME,
```

**Verifica√ß√£o:**
```bash
# Reiniciar aplica√ß√£o ap√≥s alterar env.ts
npm run dev

# Verificar no console do navegador
console.log(process.env.NEXT_PUBLIC_SUPABASE_UPLOAD_URL);
```

### üÜï Vari√°veis de Ambiente Undefined

**Sintoma:** `process.env.NEXT_PUBLIC_SUPABASE_UPLOAD_URL` retorna `undefined`.

**Solu√ß√µes:**
1. **Verificar arquivo `.env.local`:**
   ```env
   NEXT_PUBLIC_SUPABASE_UPLOAD_URL=http://[IP_DO_SEU_SERVIDOR]:8000
   ```

2. **Verificar valida√ß√£o no `env.ts`:**
   - Deve estar nas se√ß√µes `client` E `runtimeEnv`

3. **Reiniciar servidor:**
   ```bash
   # Ctrl+C para parar
   npm run dev
   ```

### DNS n√£o Propaga

```bash
# Verificar se DNS est√° correto
nslookup [SEU_DOMINIO]

# Verificar propaga√ß√£o mundial
# Use: https://dnschecker.org/#A/[SEU_DOMINIO]

# Limpar cache DNS local
sudo systemctl restart systemd-resolved
```

### Nginx n√£o Inicia

```bash
# Verificar configura√ß√£o
nginx -t

# Ver logs de erro
journalctl -u nginx -f
tail -f /var/log/nginx/error.log

# Verificar se porta est√° em uso
netstat -tulpn | grep :80
netstat -tulpn | grep :443
```

### SSL n√£o Funciona

```bash
# Verificar logs do certbot
tail -f /var/log/letsencrypt/letsencrypt.log

# Tentar novamente (for√ßa renova√ß√£o)
certbot --nginx -d [SEU_DOMINIO] --force-renewal

# Verificar certificados
certbot certificates

# Testar renova√ß√£o
certbot renew --dry-run
```

### Supabase n√£o Responde

```bash
# Verificar containers
docker ps

# Ver logs do Supabase
docker-compose logs -f

# Verificar se porta 8000 est√° aberta
netstat -tulpn | grep :8000

# Reiniciar Supabase
docker-compose restart
```

### URLs ainda com IP

1. **Verificar vari√°veis de ambiente do Supabase**
2. **Reiniciar completamente o Supabase**
3. **Verificar cache da aplica√ß√£o**
4. **Limpar cache do navegador**

### Erro: Next.js n√£o carrega imagens do novo dom√≠nio

**Erro t√≠pico:**
```
Error: Invalid src prop (https://[SEU_DOMINIO]/storage/...) on `next/image`, 
hostname "[SEU_DOMINIO]" is not configured under images in your `next.config.js`
```

**Solu√ß√£o:**

1. **Adicionar hostname no `next.config.ts`:**
```typescript
{
  protocol: 'https',
  hostname: '[SEU_DOMINIO]',
}
```

2. **Reiniciar servidor Next.js (OBRIGAT√ìRIO):**
```bash
# Parar com Ctrl+C
# Iniciar novamente
npm run dev
```

### Erro: 413 Request Entity Too Large

**Sintomas:**
- Erro "413 Request Entity Too Large" ao fazer upload de imagens
- Uploads falham para arquivos maiores que 1MB
- Erro aparece nos logs do Nginx

**Causa:**
O Nginx tem limite padr√£o de 1MB para o corpo da requisi√ß√£o.

**Solu√ß√£o:**

1. **Editar nginx.conf global:**
```bash
sudo nano /etc/nginx/nginx.conf
```

2. **Adicionar no bloco http {}:**
```nginx
http {
    client_max_body_size 100M;
    client_body_buffer_size 16k;
    client_body_timeout 60s;
}
```

3. **Reiniciar Nginx:**
```bash
sudo nginx -t
sudo systemctl restart nginx
```

### Configura√ß√£o Adicional para Uploads Grandes

**Para otimizar uploads de arquivos grandes, adicione tamb√©m no nginx.conf:**

```nginx
http {
    # ... configura√ß√µes anteriores ...
    
    # Configura√ß√µes espec√≠ficas para uploads grandes
    proxy_request_buffering off;
    proxy_max_temp_file_size 0;
    proxy_buffering off;
    
    # Timeouts para uploads grandes
    proxy_connect_timeout 600s;
    proxy_send_timeout 600s;
    proxy_read_timeout 600s;
    
    # ... resto das configura√ß√µes ...
}
```

**‚ö†Ô∏è IMPORTANTE:** Essas configura√ß√µes desabilitam o buffering de requisi√ß√µes, permitindo que uploads grandes sejam processados diretamente sem usar espa√ßo em disco tempor√°rio.

### Erros de CORS

**Sintomas:**
- Erro "Access to XMLHttpRequest... has been blocked by CORS policy"
- Erro aparece mesmo em respostas de erro (413, 500, etc.)
- Upload falha com erro de CORS

**Causa:**
O Nginx n√£o adiciona headers CORS em respostas de erro por padr√£o.

**Solu√ß√£o:**

1. **Verificar configura√ß√£o atual:**
```bash
cat /etc/nginx/sites-available/supabase
```

2. **Adicionar headers CORS com par√¢metro 'always':**
```nginx
location / {
    # ... outras configura√ß√µes
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Cache-Control, X-Requested-With' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range' always;
}
```

3. **Adicionar tratamento para requisi√ß√µes OPTIONS:**
```nginx
location ~* \.(OPTIONS)$ {
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Cache-Control, X-Requested-With' always;
    add_header 'Access-Control-Max-Age' 1728000 always;
    add_header 'Content-Type' 'text/plain charset=UTF-8' always;
    add_header 'Content-Length' 0 always;
    return 204;
}
```

**‚ö†Ô∏è IMPORTANTE:** O par√¢metro `always` √© crucial para que os headers CORS sejam inclu√≠dos mesmo em respostas de erro (4xx, 5xx).

### Erro: Object not found ap√≥s upload

**Sintomas:**
- Upload parece funcionar mas imagem n√£o aparece
- URL da imagem retorna "Object not found"
- Erro 404 ao acessar URL da imagem

**Causa:**
O upload falhou silenciosamente devido aos erros acima.

**Solu√ß√£o:**
1. Resolver primeiro os erros 413 e CORS
2. Testar upload novamente
3. Verificar logs do Supabase: `docker-compose logs -f storage`

### Teste das Corre√ß√µes

**Ap√≥s aplicar todas as corre√ß√µes acima, teste o upload:**

1. **Verificar configura√ß√£o do Nginx:**
```bash
# Testar sintaxe
sudo nginx -t

# Verificar se as configura√ß√µes est√£o ativas
sudo nginx -T | grep -A 5 -B 5 "client_max_body_size"
sudo nginx -T | grep -A 5 -B 5 "Access-Control-Allow-Origin"
```

2. **Reiniciar servi√ßos:**
```bash
# Reiniciar Nginx
sudo systemctl restart nginx

# Verificar status
sudo systemctl status nginx
```

3. **Testar upload de imagem:**
   - Tente fazer upload de uma imagem > 1MB
   - Verifique se n√£o h√° erros 413 ou CORS
   - Confirme se a imagem aparece corretamente

4. **Verificar logs em caso de erro:**
```bash
# Logs do Nginx
sudo tail -f /var/log/nginx/error.log

# Logs do Supabase Storage
docker-compose logs -f storage
```

**‚úÖ Sinais de sucesso:**
- Upload completa sem erros
- Imagem aparece na aplica√ß√£o
- Sem erros 413 ou CORS nos logs
- URL da imagem retorna a imagem corretamente

---

## üîß Manuten√ß√£o

### Comandos √öteis - Nginx

```bash
# Verificar status
systemctl status nginx

# Recarregar configura√ß√£o (sem parar)
systemctl reload nginx

# Reiniciar nginx
systemctl restart nginx

# Testar configura√ß√£o
nginx -t

# Ver logs
tail -f /var/log/nginx/access.log
tail -f /var/log/nginx/error.log
```

### Comandos √öteis - SSL

```bash
# Listar certificados
certbot certificates

# Renovar certificados
certbot renew

# Renovar espec√≠fico
certbot renew --cert-name [SEU_DOMINIO]

# Testar renova√ß√£o
certbot renew --dry-run

# Verificar timer autom√°tico
systemctl status certbot.timer
```

### Comandos √öteis - Docker/Supabase

```bash
# Ver containers
docker ps

# Logs de todos os servi√ßos
docker-compose logs -f

# Logs de servi√ßo espec√≠fico
docker-compose logs -f kong

# Reiniciar servi√ßo espec√≠fico
docker-compose restart kong

# Reiniciar tudo
docker-compose restart
```

### Comandos √öteis - Sistema

```bash
# Verificar uso de disco
df -h

# Verificar uso de mem√≥ria
free -h

# Verificar processos
htop

# Verificar portas abertas
netstat -tulpn

# Verificar conectividade
ping [SEU_DOMINIO]
telnet [SEU_DOMINIO] 443
```

---

## üìä Monitoramento

### Logs Importantes

```bash
# Nginx access log
tail -f /var/log/nginx/access.log

# Nginx error log
tail -f /var/log/nginx/error.log

# Sistema
journalctl -f

# Docker
docker-compose logs -f
```

### Verifica√ß√µes Peri√≥dicas

**Diariamente:**
- Verificar se o site est√° acess√≠vel
- Verificar logs de erro

**Semanalmente:**
- Verificar espa√ßo em disco
- Verificar uso de mem√≥ria

**Mensalmente:**
- Testar renova√ß√£o SSL
- Backup das configura√ß√µes

---

## üìã Checklist Final

### ‚úÖ Configura√ß√£o Completa

- [ ] DNS configurado e propagado
- [ ] Nginx instalado e configurado
- [ ] SSL/HTTPS funcionando
- [ ] Supabase configurado com novo dom√≠nio
- [ ] Aplica√ß√£o Next.js vari√°veis de ambiente atualizadas
- [ ] **Next.js `next.config.ts` atualizado com novo hostname**
- [ ] **Servidor Next.js reiniciado ap√≥s mudan√ßas no config**
- [ ] URLs de imagem usando HTTPS
- [ ] Imagens carregando sem erros no navegador
- [ ] Todos os testes passando
- [ ] Renova√ß√£o autom√°tica SSL ativa

### üîó URLs de Teste

- **Site principal:** https://[SEU_DOMINIO]
- **API Supabase:** https://[SEU_DOMINIO]/rest/v1/
- **Storage:** https://[SEU_DOMINIO]/storage/v1/object/
- **Exemplo de imagem:** https://[SEU_DOMINIO]/storage/v1/object/public/files/...

---

## üìû Suporte

Se encontrar problemas:

1. **Verificar logs** nos locais indicados acima
2. **Seguir se√ß√£o de solu√ß√£o de problemas**
3. **Verificar configura√ß√µes** passo a passo
4. **Testar cada componente** individualmente

**Configura√ß√£o atualizada em:** [Data de hoje]
**Vers√£o do documento:** 1.0
**Dom√≠nio:** [SEU_DOMINIO]
**IP:** [IP_DO_SEU_SERVIDOR]