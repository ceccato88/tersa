require('dotenv').config({ path: '.env.local' });
const { Client } = require('pg');

// Configura√ß√£o da conex√£o PostgreSQL usando vari√°veis de ambiente
const client = new Client({
  connectionString: process.env.POSTGRES_URL,
  ssl: {
    rejectUnauthorized: false
  },
  connectionTimeoutMillis: 10000,
  query_timeout: 30000,
  statement_timeout: 30000
});

// SQL para criar a fun√ß√£o de usu√°rio
const createUserFunction = `
CREATE OR REPLACE FUNCTION create_user_function(
  user_email TEXT,
  user_password TEXT
)
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  new_user_id UUID;
  result JSON;
BEGIN
  -- Criar usu√°rio no auth.users
  INSERT INTO auth.users (
    instance_id,
    id,
    aud,
    role,
    email,
    encrypted_password,
    email_confirmed_at,
    invited_at,
    confirmation_token,
    confirmation_sent_at,
    recovery_token,
    recovery_sent_at,
    email_change_token_new,
    email_change,
    email_change_sent_at,
    last_sign_in_at,
    raw_app_meta_data,
    raw_user_meta_data,
    is_super_admin,
    created_at,
    updated_at,
    phone,
    phone_confirmed_at,
    phone_change,
    phone_change_token,
    phone_change_sent_at,
    confirmed_at,
    email_change_token_current,
    email_change_confirm_status,
    banned_until,
    reauthentication_token,
    reauthentication_sent_at,
    is_sso_user,
    deleted_at,
    is_anonymous
  ) VALUES (
    '00000000-0000-0000-0000-000000000000',
    gen_random_uuid(),
    'authenticated',
    'authenticated',
    user_email,
    crypt(user_password, gen_salt('bf')),
    NOW(),
    NULL,
    '',
    NULL,
    '',
    NULL,
    '',
    '',
    NULL,
    NULL,
    '{"provider": "email", "providers": ["email"]}',
    '{"email_verified": true}',
    NULL,
    NOW(),
    NOW(),
    NULL,
    NULL,
    '',
    '',
    NULL,
     DEFAULT,
     '',
     0,
     NULL,
     '',
     NULL,
     FALSE,
     NULL,
     FALSE
  )
  RETURNING id INTO new_user_id;

  -- Criar perfil do usu√°rio
  INSERT INTO public.profile (
    id
  ) VALUES (
    new_user_id::text
  );

  -- Retornar informa√ß√µes do usu√°rio criado
  result := json_build_object(
    'success', true,
    'user_id', new_user_id,
    'email', user_email,
    'message', 'Usu√°rio criado com sucesso'
  );

  RETURN result;

EXCEPTION
  WHEN OTHERS THEN
    RETURN json_build_object(
      'success', false,
      'error', SQLERRM,
      'message', 'Erro ao criar usu√°rio'
    );
END;
$$;
`;

// Fun√ß√£o para criar usu√°rio ilimitado
async function createUser(email, password) {
  console.log('üîç CRIA√á√ÉO DE USU√ÅRIO');
  console.log('====================');
  
  try {
    // Conectar ao banco
    console.log('üîÑ Conectando ao PostgreSQL...');
    await client.connect();
    console.log('‚úÖ Conectado com sucesso!');
    
    // Criar a fun√ß√£o se n√£o existir
    console.log('üîÑ Criando/atualizando fun√ß√£o create_user_function...');
    await client.query(createUserFunction);
    console.log('‚úÖ Fun√ß√£o criada/atualizada com sucesso!');
    
    // Executar a fun√ß√£o para criar o usu√°rio
    console.log(`üîÑ Criando usu√°rio: ${email}`);
    const result = await client.query(
      'SELECT create_user_function($1, $2) as result',
      [email, password]
    );
    
    const userResult = result.rows[0].result;
    
    if (userResult.success) {
      console.log('‚úÖ USU√ÅRIO CRIADO COM SUCESSO!');
      console.log('üìã Detalhes:');
      console.log(`   ID: ${userResult.user_id}`);
      console.log(`   Email: ${userResult.email}`);
      console.log(`   Mensagem: ${userResult.message}`);
      
      // Verificar se o usu√°rio foi criado corretamente
      console.log('\nüîÑ Verificando usu√°rio criado...');
      const verifyResult = await client.query(`
        SELECT u.id, u.email, u.created_at, p.onboarded_at
        FROM auth.users u
        LEFT JOIN public.profile p ON u.id::TEXT = p.id::TEXT
        WHERE u.email = $1
        ORDER BY u.created_at DESC
        LIMIT 1
      `, [email]);
      
      if (verifyResult.rows.length > 0) {
        const user = verifyResult.rows[0];
        console.log('‚úÖ Verifica√ß√£o conclu√≠da:');
        console.log(`   Auth ID: ${user.id}`);
        console.log(`   Email: ${user.email}`);
        console.log(`   Criado em: ${user.created_at}`);
        console.log(`   Onboarded: ${user.onboarded_at || 'Ainda n√£o'}`);
      }
      
    } else {
      console.error('‚ùå ERRO AO CRIAR USU√ÅRIO:');
      console.error(`   Erro: ${userResult.error}`);
      console.error(`   Mensagem: ${userResult.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå ERRO DURANTE A EXECU√á√ÉO:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await client.end();
    console.log('\nüîå Conex√£o encerrada.');
  }
}

// Fun√ß√£o para listar usu√°rios
async function listUsers() {
  console.log('\nüìã LISTANDO USU√ÅRIOS');
  console.log('====================');
  
  try {
    await client.connect();
    
    const result = await client.query(`
      SELECT u.id, u.email, u.created_at, p.onboarded_at
      FROM auth.users u
      LEFT JOIN public.profile p ON u.id::TEXT = p.id::TEXT
      ORDER BY u.created_at DESC
    `);
    
    if (result.rows.length > 0) {
      console.log(`‚úÖ Encontrados ${result.rows.length} usu√°rio(s):`);
      result.rows.forEach((user, index) => {
        console.log(`\n${index + 1}. ${user.email}`);
        console.log(`   ID: ${user.id}`);
        console.log(`   Criado: ${user.created_at}`);
        console.log(`   Onboarded: ${user.onboarded_at || 'Ainda n√£o'}`);
      });
    } else {
      console.log('‚ÑπÔ∏è  Nenhum usu√°rio encontrado.');
    }
    
  } catch (error) {
    console.error('‚ùå ERRO:', error.message);
  } finally {
    await client.end();
  }
}

// Fun√ß√£o principal
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('üìñ USO DO SCRIPT:');
    console.log('================');
    console.log('Criar usu√°rio:');
    console.log('  node create-user.js create email@exemplo.com senha123');
    console.log('');
    console.log('Listar usu√°rios:');
    console.log('  node create-user.js list');
    console.log('');
    console.log('Exemplo:');
    console.log('  node create-user.js create admin@seudominio.com minhasenha123');
    return;
  }
  
  const command = args[0];
  
  if (command === 'create') {
    if (args.length < 3) {
      console.error('‚ùå Erro: Email e senha s√£o obrigat√≥rios!');
      console.log('Uso: node create-user.js create email@exemplo.com senha123');
      return;
    }
    
    const email = args[1];
    const password = args[2];
    
    if (!email.includes('@')) {
      console.error('‚ùå Erro: Email inv√°lido!');
      return;
    }
    
    if (password.length < 6) {
      console.error('‚ùå Erro: Senha deve ter pelo menos 6 caracteres!');
      return;
    }
    
    await createUser(email, password);
    
  } else if (command === 'list') {
    await listUsers();
    
  } else {
    console.error('‚ùå Comando inv√°lido! Use "create" ou "list"');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { createUser, listUsers };